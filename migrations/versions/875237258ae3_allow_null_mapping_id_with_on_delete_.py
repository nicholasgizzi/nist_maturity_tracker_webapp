# This is the updated Alembic migration script for 875237258ae3_allow_null_mapping_id_with_on_delete_
# Replace the contents of migrations/versions/875237258ae3_allow_null_mapping_id_with_on_delete_.py with this:

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '875237258ae3'
down_revision = 'a05230391b56'
branch_labels = None
depends_on = None


def upgrade():
    op.execute("DROP TABLE IF EXISTS _alembic_tmp_reviews;")
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('reviews', schema=None) as batch_op:
        # Make mapping_id nullable
        batch_op.alter_column('mapping_id',
                              existing_type=sa.INTEGER(),
                              nullable=True)
        # Recreate FK with explicit name and ON DELETE SET NULL
        batch_op.create_foreign_key(
            'fk_reviews_mapping_id',
            'system_mappings',
            ['mapping_id'],
            ['id'],
            ondelete='SET NULL'
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('reviews', schema=None) as batch_op:
        # Drop the named foreign key
        batch_op.drop_constraint('fk_reviews_mapping_id', type_='foreignkey')
        # Revert mapping_id to non-nullable
        batch_op.alter_column('mapping_id',
                              existing_type=sa.INTEGER(),
                              nullable=False)
        # Restore original unnamed FK
        batch_op.create_foreign_key(
            None,
            'system_mappings',
            ['mapping_id'],
            ['id']
        )
    # ### end Alembic commands ###
